# Docker Web App Setup Guide

## Project Structure
First, create your project directory with this structure:
```
my-web-app/
├── app/
│   ├── main.py
│   └── requirements.txt
├── Dockerfile
└── docker-compose.yml
```

## 1. Sample Application (app/main.py)
```python
from flask import Flask
app = Flask(__name__)

@app.route('/')
def hello():
    return "Hello from Docker!"

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000)
```

## 2. Dependencies (app/requirements.txt)
```
flask==3.0.0
```

## 3. Dockerfile
```dockerfile
# Use official Python runtime as base image
FROM python:3.9-slim

# Set working directory in container
WORKDIR /app

# Copy requirements file
COPY app/requirements.txt .

# Install dependencies
RUN pip install --no-cache-dir -r requirements.txt

# Copy application code
COPY app/ .

# Make port 5000 available
EXPOSE 5000

# Run the application
CMD ["python", "main.py"]
```

## 4. Docker Compose (docker-compose.yml)
```yaml
version: '3.8'

services:
  web:
    build: .
    ports:
      - "5000:5000"
    volumes:
      - ./app:/app
    environment:
      - FLASK_ENV=development
```

## Usage Instructions

1. Save all files in your project directory
2. Open terminal in project directory
3. Build and start the container:
```bash
docker-compose up --build
```
4. Access your web app at http://localhost:5000

## Common Commands

- Start containers: `docker-compose up`
- Start in background: `docker-compose up -d`
- Stop containers: `docker-compose down`
- View logs: `docker-compose logs`
- Rebuild containers: `docker-compose up --build`

## Development Workflow

1. Make changes to your code
2. The changes will be reflected immediately due to volume mounting
3. If you modify dependencies, rebuild the container with `docker-compose up --build`
